---
version: '3.7'
services:
  ## MySQL Docker Compose Config
  mysql-order:
    container_name: mysql-order
    image: mysql
    environment:
      MYSQL_DATABASE: order-service
      MYSQL_USER: manuamado
      MYSQL_PASSWORD: password
    volumes:
      - mysqldb:/var/lib/mysql
    expose:
      - "5431"
    ports:
      - "5431:5431"
    command: --port=5431
    restart: unless-stopped


  mysql-inventory:
    container_name: mysql-inventory
    image: mysql
    environment:
      MYSQL_DATABASE: inventory-service
      MYSQL_USER: manuamado
      MYSQL_PASSWORD: password
    volumes:
      - mysqldb:/var/lib/mysql
    ports:
      - "5432:5432"
    restart: unless-stopped

  ## Mongo Docker Compose Config
  mongo:
    container_name: mongo
    image: mongo:4.4.14-rc0-focal
    restart: always
    ports:
      - "27017:27017"
    expose:
      - "27017"
    volumes:
      - ./mongo-data:/data/db

  ## Keycloak Config with Mysql database
  keycloak-mysql:
    container_name: keycloak-mysql
    image: mysql:5.7
    volumes:
      - ./mysql_keycloak_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:18.0.0
    command: [ "start-dev", "--import-realm" ]
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: mysql
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8282:8080"
    volumes:
      - ./realms/:/opt/keycloak/data/import/
    depends_on:
      - keycloak-mysql

  ## Eureka Server
  discovery-server:
    image: manuamado/discovery-server:latest
    container_name: discovery-server
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker

  api-gateway:
    image: manuamado/api-gateway:latest
    container_name: api-gateway
    ports:
      - "8080:8080"
    expose:
      - "8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - discovery-server
      - keycloak

  ## Product-Service Docker Compose Config
  product-service:
    container_name: product-service
    image: manuamado/product-service:latest
    pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - mongo
      - discovery-server
      - api-gateway

  ## Order-Service Docker Compose Config
  order-service:
    container_name: order-service
    ports:
      - "50206:50206"
    image: manuamado/order-service:latest
    pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-order:5431/order-service
    depends_on:
      - mysql-order
      - discovery-server
      - api-gateway

  ## Inventory-Service Docker Compose Config
  inventory-service:
    container_name: inventory-service
    image: manuamado/inventory-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-inventory:5432/inventory-service
    depends_on:
      - mysql-inventory
      - discovery-server
      - api-gateway
volumes:
  mysqldb:
